name: Build open-vm-tools for Multiple Linux Distributions

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.distro }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu-20.04
          - ubuntu-22.04
          - centos-7
          - centos-8
          - rockylinux-8
          - almalinux-9
          - debian-10
          - debian-11

    container:
      image: ${{ matrix.distro == 'ubuntu-20.04' && 'ubuntu:20.04' || matrix.distro == 'ubuntu-22.04' && 'ubuntu:22.04' || matrix.distro == 'centos-7' && 'centos:7' || matrix.distro == 'centos-8' && 'centos:8' || matrix.distro == 'rockylinux-8' && 'rockylinux:8' || matrix.distro == 'almalinux-9' && 'almalinux:9' || matrix.distro == 'debian-10' && 'debian:10' || matrix.distro == 'debian-11' && 'debian:11' }}

    steps:
    - name: Install dependencies (Ubuntu/Debian)
      if: startsWith(matrix.distro, 'ubuntu') || startsWith(matrix.distro, 'debian')
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y \
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          libglib2.0-dev \
          libgtk-3-dev \
          libgtkmm-3.0-dev \
          libpam0g-dev \
          libssl-dev \
          libxss1-dev \
          libicu-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxtst-dev \
          libmspack-dev \
          libudev-dev \
          libdrm-dev \
          libxcomposite-dev \
          git \
          cmake

    - name: Install dependencies (CentOS 7)
      if: matrix.distro == 'centos-7'
      run: |
        yum update -y
        yum groupinstall -y 'Development Tools'
        yum install -y \
          autoconf \
          automake \
          libtool \
          pkgconfig \
          glib2-devel \
          gtk3-devel \
          gtkmm30-devel \
          pam-devel \
          openssl-devel \
          libXss-devel \
          libicu-devel \
          libXinerama-devel \
          libXrandr-devel \
          libXcursor-devel \
          libXtst-devel \
          mspack-devel \
          systemd-devel \
          libdrm-devel \
          libXcomposite-devel \
          git \
          cmake3

    - name: Install dependencies (CentOS 8)
      if: matrix.distro == 'centos-8'
      run: |
        # 修复CentOS 8的源
        sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*.repo
        sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*.repo
        yum update -y
        yum groupinstall -y 'Development Tools'
        yum install -y \
          autoconf \
          automake \
          libtool \
          pkgconfig \
          glib2-devel \
          gtk3-devel \
          gtkmm30-devel \
          pam-devel \
          openssl-devel \
          libXss-devel \
          libicu-devel \
          libXinerama-devel \
          libXrandr-devel \
          libXcursor-devel \
          libXtst-devel \
          libmspack-devel \
          systemd-devel \
          libdrm-devel \
          libXcomposite-devel \
          git \
          cmake

    - name: Install dependencies (Rocky/Alma Linux)
      if: startsWith(matrix.distro, 'rockylinux') || startsWith(matrix.distro, 'almalinux')
      run: |
        yum update -y
        yum groupinstall -y 'Development Tools'
        yum install -y \
          autoconf \
          automake \
          libtool \
          pkgconfig \
          glib2-devel \
          gtk3-devel \
          gtkmm30-devel \
          pam-devel \
          openssl-devel \
          libXss-devel \
          libicu-devel \
          libXinerama-devel \
          libXrandr-devel \
          libXcursor-devel \
          libXtst-devel \
          libmspack-devel \
          systemd-devel \
          libdrm-devel \
          libXcomposite-devel \
          git \
          cmake

    - name: Checkout open-vm-tools source
      uses: actions/checkout@v4
      with:
        repository: vmware/open-vm-tools
        path: open-vm-tools
        fetch-depth: 0

    - name: Get latest version tag
      working-directory: open-vm-tools
      run: |
        # 获取最新的tag
        LATEST_TAG=$(git describe --tags --abbrev=0)
        echo "Latest tag: $LATEST_TAG"
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        
        # 切换到最新tag
        git checkout $LATEST_TAG

    - name: Configure timezone (for Debian/Ubuntu)
      if: startsWith(matrix.distro, 'ubuntu') || startsWith(matrix.distro, 'debian')
      run: |
        export DEBIAN_FRONTEND=noninteractive
        ln -fs /usr/share/zoneinfo/UTC /etc/localtime

    - name: Build open-vm-tools
      working-directory: open-vm-tools/open-vm-tools
      run: |
        # 生成配置脚本
        autoreconf -fiv
        
        # 配置构建选项
        ./configure \
          --prefix=/usr \
          --sysconfdir=/etc \
          --localstatedir=/var \
          --libdir=/usr/lib \
          --enable-deploypkg \
          --enable-servicediscovery \
          --disable-tests \
          --without-xerces \
          --without-icu \
          --without-x \
          --without-gtk2 \
          --without-gtkmm \
          --without-kernel-modules
        
        # 编译
        make -j$(nproc)
        
        # 创建安装目录
        make DESTDIR=$PWD/install install

    - name: Create archive
      working-directory: open-vm-tools/open-vm-tools
      run: |
        # 获取版本信息
        VERSION=${LATEST_TAG:-"unknown"}
        echo "Building version: $VERSION for ${{ matrix.distro }}"
        
        # 创建包含版本信息的压缩包
        tar -czf "open-vm-tools-${VERSION}-${{ matrix.distro }}.tar.gz" -C install .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: open-vm-tools-${{ env.LATEST_TAG }}-${{ matrix.distro }}
        path: open-vm-tools/open-vm-tools/open-vm-tools-*.tar.gz
        retention-days: 30

  # 创建发布包（可选）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./open-vm-tools-*/open-vm-tools-*.tar.gz
        asset_name: open-vm-tools-multi-platform.tar.gz
        asset_content_type: application/gzip
